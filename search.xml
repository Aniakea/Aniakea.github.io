<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>anaconda安装</title>
      <link href="/2024/11/29/anaconda%E5%AE%89%E8%A3%85/"/>
      <url>/2024/11/29/anaconda%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要-anaconda">为什么需要 anaconda</h3><p>python 本身提供了一个项目级别的虚拟环境</p><p>但是如果我们需要在不同的项目中使用不同的python版本</p><p>这就是python自己提供的 venv 无法做到的事情</p><p>所以我们需要一个外部的环境管理器来做这种级别的隔离</p><p>这就是使用 anaconda 的原因</p><h3 id="下载和安装">下载和安装</h3><p>通过<a href="https://www.anaconda.com/download">官网</a>或者<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华镜像站</a>下载</p><p>官网需要注册, 所以通常建议在镜像站下载</p><p>这里主要描述linux下的安装</p><p>先下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --user-agent=&quot;Mozilla&quot; https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/$&#123;select_version&#125;.sh</span><br></pre></td></tr></table></figure><p>这里加user-agent是因为清华源http请求需要这个</p><p>安装前需要对下载下来的 sh 文件授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 ./$&#123;select_version&#125;.sh</span><br></pre></td></tr></table></figure><p>直接执行脚本按照提示安装即可</p><h3 id="基本使用">基本使用</h3><p>安装完成后会有一个 conda 指令, 通常情况下我们通过这个指令进行操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装包</span></span><br><span class="line">conda install $pack_name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除包</span></span><br><span class="line">conda remove $pack_name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新环境</span></span><br><span class="line">conda create -n $env_name $pack_name...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要导出环境</p><p>需要安装 conda-pack 插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">conda install conda-pack</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">conda pack -n $env_name -o $output</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导入方式即拷贝导出包到需要导入的电脑, 解压到 anaconda 安装路径下的 env 路径下</p><p>为什么说是通常情况呢</p><p>如果安装的 anaconda 的版本比较早期, 那么 conda 没有使用 libmamba, Solving environment 会很慢</p><p>这时候要么切换solve引擎要么安装 mamba 指令</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在c++中嵌入python解释器</title>
      <link href="/2024/11/27/%E5%B0%9D%E8%AF%95%E5%9C%A8c-%E4%B8%AD%E5%B5%8C%E5%85%A5python%E8%A7%A3%E9%87%8A%E5%99%A8%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/11/27/%E5%B0%9D%E8%AF%95%E5%9C%A8c-%E4%B8%AD%E5%B5%8C%E5%85%A5python%E8%A7%A3%E9%87%8A%E5%99%A8%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>还是哪个展示应力模型的项目, 由于是基于之前的项目的, 而之前的项目的gui是qt做的, 之前又没有告诉我需要嵌入这个程序, 而我python的已经写完了</p><p>所以开始研究嵌入方案</p><p>首先需要确定python是否独立运行于老的gui程序</p><p>如果独立运行的情况, 我需要在python端额外写一个网络模块来和老gui程序进行交互,两边都得改, 怪麻烦的, 不考虑</p><p>非独立运行的话, 就需要嵌入python解释器来执行我写的python代码</p><h3 id="准备">准备</h3><p>首先我们先安装 pybind11 库, 这是个 head-only 的库, 所以只需要下载源码, 在项目中添加头文件搜索的路径即可</p><p>先下载, <s>最简单的方案就是去github下载zip(he</s></p><p>为了不出现违法收入, 我们使用<code>gitee</code>的镜像, <a href="https://gitee.com/mirrors/pybind11">链接</a></p><p>直接一键下载或者使用git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if has ssh</span></span><br><span class="line">git <span class="built_in">clone</span> git@gitee.com:mirrors/pybind11.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># or use https</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/mirrors/pybind11.git</span><br></pre></td></tr></table></figure><p>如果是项目是cmake的话可以直接用 <code>FetchContent</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(FetchContent)</span><br><span class="line"></span><br><span class="line">FetchContent_Declare(</span><br><span class="line">        pybind11</span><br><span class="line">        GIT_REPOSITORY https://gitee.com/mirrors/pybind11.git</span><br><span class="line">        GIT_TAG v2.<span class="number">13</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">FetchContent_MakeAvailable(pybind11)</span><br></pre></td></tr></table></figure><p>如果环境变量中包含python的路径会自动寻找到python和libpython</p><p>可惜的是, 这<s>傻逼</s>项目用的qmake, 所以我们只能在pro文件里手动加include路径和link路径了</p><h3 id="使用">使用</h3><p>这里建议去逛<a href="https://pybind11.readthedocs.io/en/stable/index.html">官方文档</a>, 比我这啰啰嗦嗦好多了, 在这我只讲一些我遇见的坑</p><ol><li class="lvl-3"><p>解释器需要自己设置<code>pythonhome</code>, 不设置的话啥都import不了但是pybind11库没有提供接口, 只能使用libpython提供的c接口, libpython提供的接口命名又怪的要死</p></li><li class="lvl-3"><p>暂留, 之后想起来了再更新</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyvista初试</title>
      <link href="/2024/11/27/pyvista%E5%88%9D%E8%AF%95/"/>
      <url>/2024/11/27/pyvista%E5%88%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>跳槽后工作没那么忙了, 遂开始写博客打法时间.</p><p>因为现在的项目需要加载三维模型并显示应力, 所以需要vtk, 为了开发简单, 选择了<code>python</code></p><h3 id="开发环境">开发环境</h3><p>需要 <code>python &gt; 3.8</code></p><p>使用 <strong><code>pip</code></strong> 进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyvista</span><br></pre></td></tr></table></figure><p>使用 <strong><code>conda</code></strong> 进行安装</p><p>需要有<a href="https://aniakea.github.io/2024/11/29/anaconda%E5%AE%89%E8%A3%85/" title="安装教程"><em><code>Anaconda</code></em></a>环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge pyvista</span><br></pre></td></tr></table></figure><p>详情参考 <em><a href="https://docs.pyvista.org/getting-started/installation.html">官方文档</a></em>.</p><h3 id="尝试">尝试</h3><p>尝试官方示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyvista</span><br><span class="line">mesh = pyvista.Sphere()</span><br><span class="line">mesh.plot()</span><br></pre></td></tr></table></figure><p>可以看到<img src="/pic/image1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyvista <span class="keyword">import</span> examples</span><br><span class="line">mesh = examples.download_dragon()</span><br><span class="line">mesh[<span class="string">&#x27;scalars&#x27;</span>] = mesh.points[:, <span class="number">1</span>]</span><br><span class="line">mesh.plot(cpos=<span class="string">&#x27;xy&#x27;</span>, cmap=<span class="string">&#x27;plasma&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以看到<img src="/pic/image2.png" alt=""></p><p>更多请查看 <em><a href="https://docs.pyvista.org/user-guide/">官方文档</a></em></p><h3 id="尝试通过excel或csv提供数据">尝试通过excel或csv提供数据</h3><p>为了方便,这里我们需要使用<code>pandas</code>.<code>pyvistaqt</code>.<code>pyqt</code>库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas pyvistaqt PyQt5</span><br></pre></td></tr></table></figure><p>分为两个数据文件, 一个为提供点的xyz轴数据, 一个提供单元所用的点</p><p><em>point.xlsx</em>文件结构为</p><table><thead><tr><th>编号</th><th>x</th><th>y</th><th>z</th></tr></thead></table><p><em>node.xlsx</em>文件结构为</p><table><thead><tr><th>编号</th><th>unit</th><th>p1</th><th>p2</th><th>…</th></tr></thead></table><p>考虑到单元类型不唯一, 这里只能选择 <code>UnStructedGrid</code></p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QFrame,</span><br><span class="line">    QVBoxLayout,</span><br><span class="line">    QApplication,</span><br><span class="line">    QHBoxLayout,</span><br><span class="line">    QButtonGroup,</span><br><span class="line">    QRadioButton,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> pyvista <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pyvistaqt <span class="keyword">import</span> QtInteractor</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>(<span class="title class_ inherited__">QFrame</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        processor.change(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.vmin = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.vmax = <span class="number">0.1319</span></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.plotter = QtInteractor(<span class="variable language_">self</span>, auto_update=<span class="number">1</span>)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.plotter.interactor)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.read_excel()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_excel</span>(<span class="params">self</span>):</span><br><span class="line">        point_data = pd.read_excel(<span class="string">&quot;./point.xlsx&quot;</span>, header=<span class="literal">None</span>)</span><br><span class="line">        point_pos = []</span><br><span class="line">        point_keys = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> point_data.values:</span><br><span class="line">            point_pos.append(row[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line">            point_keys.append(row[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        cell_data = pd.read_excel(<span class="string">&quot;./node.xlsx&quot;</span>, header=<span class="literal">None</span>)</span><br><span class="line">        cell = []</span><br><span class="line">        cell_shapes = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">covert</span>(<span class="params">code</span>):</span><br><span class="line">            <span class="keyword">return</span> point_keys.index(code)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> cell_data.values:</span><br><span class="line">            cell_shapes.append(pv.CellType.QUAD)</span><br><span class="line">            cell.append([<span class="number">4</span>].append(<span class="built_in">map</span>(covert, row[<span class="number">2</span>:])))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.grid = pv.UnstructuredGrid(cell, cell_shapes, point_pos)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.actor = <span class="variable language_">self</span>.plotter.add_mesh(</span><br><span class="line">            <span class="variable language_">self</span>.grid, cmap=<span class="string">&quot;viridis&quot;</span>, smooth_shading=<span class="literal">True</span>, copy_mesh=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">widget = Widget()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">widget.show()</span><br></pre></td></tr></table></figure><p>需要注意的一点为cell中的值对应的是point数组的下标, 这里这么写主要是应对point编号非从0开始递增的情况</p><p>目前的<code>unit_type</code>没有考虑非四边形的情况, 若需要考虑多类型组合的方式, 请参考<a href="https://docs.pyvista.org/examples/00-load/create-polyhedron#sphx-glr-examples-00-load-create-polyhedron-py">官方文档</a></p><p>从excel中加载数据通常很大, 建议完成读取后存储为模型文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.grid.save(<span class="string">&quot;./mesh.vtk&quot;</span>)</span><br></pre></td></tr></table></figure><p>这种方式不能储存stl文件, 若是确定只需要表面的点需要存储为stl文件, 需要提取表面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.grid.extract_surface().save(<span class="string">&quot;./mesh.stl&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="尝试添加数据到模型">尝试添加数据到模型</h3><p>注意数据的数量必须要和当前显示的模型的点的数量一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.grid[<span class="string">&quot;range&quot;</span>] = data</span><br><span class="line"><span class="variable language_">self</span>.actor = <span class="variable language_">self</span>.plotter.add_mesh(</span><br><span class="line">            <span class="variable language_">self</span>.grid, </span><br><span class="line">            cmap=<span class="string">&quot;viridis&quot;</span>, </span><br><span class="line">            scalars=<span class="string">&quot;range&quot;</span>,</span><br><span class="line">            smooth_shading=<span class="literal">True</span>, </span><br><span class="line">            copy_mesh=<span class="literal">True</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h3 id="尝试自定义色彩映射">尝试自定义色彩映射</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_cmap</span>(<span class="params">vmin, vmax, n=<span class="number">256</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建一个从蓝黑色到黄色再到红色的自定义颜色映射</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    vmin : float</span></span><br><span class="line"><span class="string">        颜色映射的最小值</span></span><br><span class="line"><span class="string">    vmax : float</span></span><br><span class="line"><span class="string">        颜色映射的最大值</span></span><br><span class="line"><span class="string">    n : int, 可选</span></span><br><span class="line"><span class="string">        颜色映射中的颜色数量，默认为256</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    pyvista.LookupTable</span></span><br><span class="line"><span class="string">        PyVista 查找表对象，可用于设置 mesh 的标量条</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义颜色映射的颜色</span></span><br><span class="line">    colors = [<span class="string">&#x27;#000033&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#00FFFF&#x27;</span>, <span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建 matplotlib 颜色映射</span></span><br><span class="line">    cmap = LinearSegmentedColormap.from_list(<span class="string">&quot;custom_blue_black_to_yellow_red&quot;</span>, colors, N=n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建 PyVista 查找表</span></span><br><span class="line">    lut = pv.LookupTable()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置颜色映射的范围</span></span><br><span class="line">    lut.SetRange(vmin, vmax)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填充查找表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        r, g, b, _ = cmap(i / (n - <span class="number">1</span>))</span><br><span class="line">        lut.SetTableValue(i, r, g, b)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lut</span><br></pre></td></tr></table></figure><p>函数 <code>make_cmap</code> 前两个参数决定了映射的上下限, 第三个参数决定映射的色阶数量</p><p>colors至少需要两个颜色, 此时色阶在rgb上线性变化, 这里定义了中间色号, 所以色阶呈贝塞尔曲线变化</p><p>在 add_mesh 函数中的 <code>cmap</code> 参数设置为函数 <code>make_cmap</code> 的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.grid[<span class="string">&quot;range&quot;</span>] = data</span><br><span class="line">actor = <span class="variable language_">self</span>.plotter.add_mesh(</span><br><span class="line">    <span class="variable language_">self</span>.grid,</span><br><span class="line">    scalars=<span class="string">&quot;range&quot;</span>,</span><br><span class="line">    cmap = make_cmap(<span class="variable language_">self</span>.vmin,<span class="variable language_">self</span>.vmax),</span><br><span class="line">    <span class="comment"># cmap=&quot;viridis&quot;,</span></span><br><span class="line">    smooth_shading=<span class="literal">True</span>,</span><br><span class="line">    copy_mesh=<span class="literal">True</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
